import { PrismaClient } from '@prisma/client';
import dotenv from 'dotenv';

dotenv.config();

const prisma = new PrismaClient({
  log: ['query', 'info', 'warn', 'error'],
});

async function verifyConfig() {
  console.log('üîç V√©rification de la configuration...\n');
  
  // V√©rifier DATABASE_URL
  const dbUrl = process.env.DATABASE_URL;
  if (!dbUrl) {
    console.error('‚ùå DATABASE_URL non d√©finie');
    process.exit(1);
  }
  
  console.log('‚úÖ DATABASE_URL trouv√©e');
  
  // V√©rifier pgbouncer parameter
  if (!dbUrl.includes('pgbouncer=true')) {
    console.warn('‚ö†Ô∏è  pgbouncer=true manquant dans DATABASE_URL');
    console.log('   Ajouter: ?pgbouncer=true&connection_limit=1');
  } else {
    console.log('‚úÖ Configuration PgBouncer d√©tect√©e');
  }
  
  // V√©rifier connection_limit
  if (!dbUrl.includes('connection_limit')) {
    console.warn('‚ö†Ô∏è  connection_limit manquant dans DATABASE_URL');
  } else {
    console.log('‚úÖ Connection limit configur√©');
  }
  
  // Tester connexion
  console.log('\nüîó Test de connexion √† la base de donn√©es...');
  try {
    await prisma.$connect();
    console.log('‚úÖ Connexion r√©ussie');
    
    // Tester une requ√™te simple
    const userCount = await prisma.user.count();
    console.log(`‚úÖ Requ√™te test r√©ussie: ${userCount} utilisateurs trouv√©s`);
    
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.message);
    process.exit(1);
  } finally {
    await prisma.$disconnect();
  }
  
  console.log('\n‚úÖ Configuration valid√©e!');
}

verifyConfig();
