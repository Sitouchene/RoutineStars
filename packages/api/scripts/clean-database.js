import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

async function checkAndCleanDatabase() {
  try {
    console.log('üîç Checking database state...');
    
    // V√©rifier les colonnes familyId restantes
    const familyIdColumns = await prisma.$queryRaw`
      SELECT column_name, table_name 
      FROM information_schema.columns 
      WHERE table_schema = 'public' 
      AND column_name = 'familyId'
    `;
    
    console.log('üìã familyId columns found:', familyIdColumns);
    
    if (familyIdColumns.length > 0) {
      console.log('üßπ Cleaning up familyId columns...');
      
      // Supprimer les contraintes de cl√©s √©trang√®res
      const constraints = await prisma.$queryRaw`
        SELECT constraint_name, table_name
        FROM information_schema.table_constraints 
        WHERE constraint_type = 'FOREIGN KEY' 
        AND constraint_name LIKE '%familyId%'
      `;
      
      console.log('üîó Foreign key constraints:', constraints);
      
      // Supprimer les colonnes familyId
      for (const column of familyIdColumns) {
        console.log(`üóëÔ∏è Dropping familyId from ${column.table_name}...`);
        await prisma.$executeRawUnsafe(`ALTER TABLE "${column.table_name}" DROP COLUMN IF EXISTS "familyId"`);
      }
    }
    
    // V√©rifier l'√©tat final
    const finalCheck = await prisma.$queryRaw`
      SELECT column_name, table_name 
      FROM information_schema.columns 
      WHERE table_schema = 'public' 
      AND column_name IN ('familyId', 'groupId')
    `;
    
    console.log('‚úÖ Final state:', finalCheck);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  } finally {
    await prisma.$disconnect();
  }
}

checkAndCleanDatabase();
