// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Groupe (famille ou classe)
model Group {
  id        String   @id @default(uuid())
  type      String   // 'family' | 'classroom'
  name      String
  code      String   @unique // Code partageable comme 'PANDA_ROUX_305'
  language  String   @default("fr") // 'fr' | 'en' | 'ar'
  country   String?  // 'CA' | 'DZ' (Phase 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users         User[]
  categories    Category[]
  taskTemplates TaskTemplate[]
  dailyMessages DailyMessage[]
  evaluationWindows EvaluationWindow[]

  @@map("groups")
}

// Catégories de tâches
model Category {
  id          String   @id @default(uuid())
  groupId     String?  // null pour les catégories système, obligatoire pour les catégories personnalisées
  title       String   // Clé technique (household, routine, study)
  display     String   // Nom d'affichage (Maison, Routine, Études)
  description String   // Description détaillée
  icon        String?  // Icône de la catégorie
  isSystem    Boolean  @default(false) // true pour les catégories système (protégées)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  group         Group?         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  taskTemplates TaskTemplate[]

  @@unique([groupId, title], name: "category_group_title_unique")
  @@map("categories")
}

// Utilisateurs (parents/enfants ou enseignants/élèves)
model User {
  id       String  @id @default(uuid())
  groupId  String
  role     String // 'parent' ou 'child' (family) | 'teacher' ou 'student' (classroom)
  name     String
  email    String? @unique // Uniquement pour parents/enseignants
  password String? // Uniquement pour parents/enseignants (haché)
  age      Int? // Uniquement pour enfants/élèves
  pin      String? // Uniquement pour enfants/élèves (haché)
  avatar   String?
  theme    String  @default("default") // 'default' | 'boy' | 'girl'

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group       Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tasks       Task[]
  rewards     Reward[]
  assignments TaskAssignment[]
  daySubmissions DaySubmission[]
  dailyMessages DailyMessage[]
  evaluationWindows EvaluationWindow[]

  @@map("users")
}

// Modèles de tâches (créés par parents/enseignants)
model TaskTemplate {
  id          String  @id @default(uuid())
  groupId     String
  categoryId  String  // Relation vers Category (obligatoire)
  title       String
  icon        String?
  points      Int     @default(5)
  recurrence  String // 'daily', 'weekday', 'weekend', etc.
  description String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group      Group            @relation(fields: [groupId], references: [id], onDelete: Cascade)
  category   Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tasks      Task[]
  assignments TaskAssignment[]

  @@map("task_templates")
}

// Tâches assignées quotidiennes
model Task {
  id             String    @id @default(uuid())
  taskTemplateId String
  userId         String // ID de l'enfant
  date           DateTime // Date de la tâche
  status         String    @default("assigned") // 'assigned', 'self_evaluated', 'submitted', 'validated'
  selfScore      Int? // 0-100
  parentScore    Int? // 0-100
  parentComment  String?
  lockedAt       DateTime? // Quand le parent a validé

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  taskTemplate TaskTemplate @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskTemplateId, date])
  @@map("tasks")
}

// Messages du jour (par groupe ou ciblé à un enfant/élève)
model DailyMessage {
  id        String   @id @default(uuid())
  groupId   String
  childId   String?  // si null => message global au groupe
  date      DateTime
  message   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  child User? @relation(fields: [childId], references: [id])

  @@unique([groupId, childId, date])
  @@map("daily_messages")
}

// Fenêtre horaire d'autoévaluation/soumission
model EvaluationWindow {
  id        String   @id @default(uuid())
  groupId   String
  childId   String?   // si null => règle par défaut pour le groupe
  startTime String    // format HH:mm
  endTime   String    // format HH:mm
  daysMask  String    // ex: "1,1,1,1,1,1,1" pour L..D
  timezone  String    // ex: "Europe/Paris"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  child User? @relation(fields: [childId], references: [id])

  @@unique([groupId, childId])
  @@map("evaluation_windows")
}

// Assignations de tâches (qui peut avoir quelle tâche)
model TaskAssignment {
  id             String    @id @default(uuid())
  taskTemplateId String
  childId        String
  startDate      DateTime
  endDate        DateTime?
  isActive       Boolean   @default(true)
  // Options de récurrence spécifiques à l'assignation (prioritaires sur le template)
  recurrence           String?     // ex: 'weekly_days' | 'every_n_days' | etc.
  recurrenceDays       String?     // CSV des jours 0-6 pour weekly_days, ex: "1,3,5"
  recurrenceStartDate  DateTime?   // date de départ pour every_n_days
  recurrenceInterval   Int?        // intervalle en jours pour every_n_days
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  taskTemplate TaskTemplate @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
  child        User          @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@map("task_assignments")
}

// Soumissions de journée par enfant
model DaySubmission {
  id        String   @id @default(uuid())
  childId   String
  date      DateTime // Date de la soumission
  submittedAt DateTime @default(now()) // Quand l'enfant a soumis
  validatedAt DateTime? // Quand le parent a validé
  parentComment String? // Commentaire général du parent pour la journée

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  child User @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@unique([childId, date])
  @@map("day_submissions")
}

// Récompenses et badges
model Reward {
  id        String   @id @default(uuid())
  userId    String
  badgeType String
  earnedAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("rewards")
}



