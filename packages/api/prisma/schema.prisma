generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Group {
  id                String              @id @default(uuid())
  type              String              @default("family")
  name              String
  code              String              @unique
  language          String              @default("fr")
  country           String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  books             Book[]
  users             User[]
  categories        Category[]
  dailyMessages     DailyMessage[]
  evaluationWindows EvaluationWindow[]
  taskTemplates     TaskTemplate[]
  groupBadges       GroupBadge[]
  groupRewards      GroupReward[]

  @@map("groups")
}

model Category {
  id            String         @id @default(uuid())
  title         String
  display       String
  description   String
  icon          String?
  isSystem      Boolean        @default(false)
  isActive      Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  groupId       String?
  group         Group?         @relation(fields: [groupId], references: [id], onDelete: Cascade)
  taskTemplates TaskTemplate[]

  @@unique([groupId, title], name: "category_group_title_unique", map: "category_group_title_unique")
  @@map("categories")
}

model User {
  id                 String              @id @default(uuid())
  role               String
  name               String
  email              String?             @unique
  password           String?
  age                Int?
  pin                String?
  avatar             String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  groupId            String?
  theme              String              @default("default")
  lastLoginAt        DateTime?           // Nouveau champ pour tracking connexions
  totalPointsEarned  Int                 @default(0) // Nouveau champ pour optimiser les requêtes
  group              Group?              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  bookLikes          BookLike[]
  bookReviews        BookReview[]
  dailyMessages      DailyMessage[]
  daySubmissions     DaySubmission[]
  evaluationWindows  EvaluationWindow[]
  assignedReadings   ReadingAssignment[] @relation("ReadingAssigner")
  readingAssignments ReadingAssignment[] @relation("ReadingChild")
  assignments        TaskAssignment[]
  tasks              Task[]
  userBadges         UserBadge[]
  rewardRedemptions  RewardRedemption[]
  pointTransactions  PointTransaction[]
  quizAttempts       QuizAttempt[]

  @@index([groupId, role], map: "idx_users_groupId_role")
  @@index([groupId, lastLoginAt], map: "idx_users_groupId_lastLoginAt")
  @@index([totalPointsEarned], map: "idx_users_totalPointsEarned")
  @@map("users")
}

model TaskTemplate {
  id          String           @id @default(uuid())
  categoryId  String
  title       String
  icon        String?
  points      Int              @default(5)
  recurrence  String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  groupId     String?
  group       Group?           @relation(fields: [groupId], references: [id], onDelete: Cascade)
  assignments TaskAssignment[]
  category    Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tasks       Task[]

  @@index([categoryId], map: "idx_task_templates_categoryId")
  @@map("task_templates")
}

model Task {
  id             String       @id @default(uuid())
  taskTemplateId String
  userId         String
  date           DateTime
  status         String       @default("assigned")
  selfScore      Int?
  parentScore    Int?
  parentComment  String?
  lockedAt       DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  taskTemplate   TaskTemplate @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskTemplateId, date])
  @@index([taskTemplateId], map: "idx_tasks_taskTemplateId")
  @@index([userId, date], map: "idx_tasks_userId_date")
  @@index([userId, date, selfScore], map: "idx_tasks_userId_date_score")
  @@map("tasks")
}

model DailyMessage {
  id        String   @id @default(uuid())
  childId   String?
  date      DateTime
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String?
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  child     User?    @relation(fields: [childId], references: [id])

  @@index([childId], map: "idx_daily_messages_childId")
  @@index([groupId, date], map: "idx_daily_messages_groupId_date")
  @@map("daily_messages")
}

model EvaluationWindow {
  id        String   @id @default(uuid())
  childId   String?
  startTime String
  endTime   String
  daysMask  String
  timezone  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  groupId   String?
  group     Group?   @relation(fields: [groupId], references: [id], onDelete: Cascade)
  child     User?    @relation(fields: [childId], references: [id])

  @@index([childId], map: "idx_evaluation_windows_childId")
  @@map("evaluation_windows")
}

model TaskAssignment {
  id                  String       @id @default(uuid())
  taskTemplateId      String
  childId             String
  startDate           DateTime
  endDate             DateTime?
  isActive            Boolean      @default(true)
  recurrence          String?
  recurrenceDays      String?
  recurrenceStartDate DateTime?
  recurrenceInterval  Int?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  child               User         @relation(fields: [childId], references: [id], onDelete: Cascade)
  taskTemplate        TaskTemplate @relation(fields: [taskTemplateId], references: [id], onDelete: Cascade)

  @@index([childId], map: "idx_task_assignments_childId")
  @@index([childId, isActive], map: "idx_task_assignments_childId_isActive")
  @@index([taskTemplateId], map: "idx_task_assignments_taskTemplateId")
  @@map("task_assignments")
}

model DaySubmission {
  id            String    @id @default(uuid())
  childId       String
  date          DateTime
  submittedAt   DateTime  @default(now())
  validatedAt   DateTime?
  parentComment String?
  pointsEarned  Int       @default(0) // Nouveau champ pour les points gagnés
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  child         User      @relation(fields: [childId], references: [id], onDelete: Cascade)

  @@unique([childId, date])
  @@index([childId, date], map: "idx_day_submissions_childId_date")
  @@index([validatedAt], map: "idx_day_submissions_validatedAt")
  @@index([pointsEarned], map: "idx_day_submissions_pointsEarned")
  @@map("day_submissions")
}


model Book {
  id                 String              @id @default(uuid())
  groupId            String?
  googleBookId       String?
  title              String
  author             String?
  totalPages         Int
  isbn               String?
  coverImageUrl      String?
  language           String              @default("fr")
  genres             String[]             // Nouveaux genres
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  likes              BookLike[]
  reviews            BookReview[]
  group              Group?              @relation(fields: [groupId], references: [id], onDelete: Cascade)
  readingAssignments ReadingAssignment[]
  quizzes            ReadingQuiz[]

  @@map("books")
}

model ReadingAssignment {
  id             String           @id @default(uuid())
  bookId         String
  childId        String
  assignedById   String?
  assignmentType String
  totalPoints    Int              @default(0)
  startDate      DateTime?
  dueDate        DateTime?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  assignedBy     User?            @relation("ReadingAssigner", fields: [assignedById], references: [id])
  book           Book             @relation(fields: [bookId], references: [id], onDelete: Cascade)
  child          User             @relation("ReadingChild", fields: [childId], references: [id], onDelete: Cascade)
  progress       ReadingProgress?

  @@map("reading_assignments")
}

model ReadingProgress {
  id                  String            @id @default(uuid())
  readingAssignmentId String            @unique
  currentPage         Int               @default(0)
  currentPoints       Int               @default(0)
  lastMilestone       Int               @default(0)
  isFinished          Boolean           @default(false)
  finishedAt          DateTime?
  lastPageUpdate      DateTime          @default(now())
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  readingAssignment   ReadingAssignment @relation(fields: [readingAssignmentId], references: [id], onDelete: Cascade)

  @@map("reading_progress")
}

model BookReview {
  id            String   @id @default(uuid())
  bookId        String
  reviewerId    String
  rating        Int
  comment       String?
  isChildReview Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  book          Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  reviewer      User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([bookId, reviewerId])
  @@map("book_reviews")
}

model BookLike {
  id        String   @id @default(uuid())
  bookId    String
  userId    String
  createdAt DateTime @default(now())
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([bookId, userId])
  @@map("book_likes")
}

model BookTemplate {
  id            String   @id @default(uuid())
  title         String
  author        String
  totalPages    Int
  isbn          String?
  coverImageUrl String?
  language      String   @default("fr")
  genres        String[]
  googleBookId  String?  @unique
  synopsis      String?
  ageRange      Json?
  themes        String[]
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("book_templates")
}

// ===== SYSTÈME AWARDS/BADGES =====

model GlobalBadge {
  id             String   @id @default(cuid())
  name           String   @unique
  description    String
  icon           String
  category       String
  rarity         String
  pointsRequired Int
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  groupBadges    GroupBadge[]
  @@index([category])
  @@index([rarity])
  @@map("global_badges")
}

model GroupBadge {
  id             String   @id @default(cuid())
  groupId        String
  globalBadgeId  String?
  name           String
  description    String
  icon           String
  category       String
  rarity         String
  pointsRequired Int
  isActive       Boolean  @default(true)
  isEnabled      Boolean  @default(true)
  unlockType     String   @default("automatic")
  autoCriteria   Json?
  isSpecial      Boolean  @default(false)
  specialReason  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  group          Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  globalBadge    GlobalBadge? @relation(fields: [globalBadgeId], references: [id])
  userBadges     UserBadge[]
  @@unique([groupId, name])
  @@index([groupId])
  @@map("group_badges")
}

model UserBadge {
  id        String   @id @default(cuid())
  userId    String
  badgeId   String
  earnedAt  DateTime @default(now())
  isVisible Boolean  @default(true)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge     GroupBadge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  @@unique([userId, badgeId])
  @@index([userId])
  @@map("user_badges")
}

model GlobalReward {
  id          String   @id @default(cuid())
  name        String   @unique
  description String
  icon        String
  category    String
  cost        Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupRewards GroupReward[]
  @@index([category])
  @@index([cost])
  @@map("global_rewards")
}

model GroupReward {
  id          String   @id @default(cuid())
  groupId     String
  globalRewardId String?
  name        String
  description String
  icon        String
  category    String
  cost        Int
  isActive    Boolean  @default(true)
  isEnabled   Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  group       Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  globalReward GlobalReward? @relation(fields: [globalRewardId], references: [id])
  redemptions RewardRedemption[]
  @@unique([groupId, name])
  @@index([groupId])
  @@map("group_rewards")
}

model RewardRedemption {
  id          String   @id @default(cuid())
  userId      String
  rewardId    String
  redeemedAt  DateTime @default(now())
  status      String
  parentComment String?
  childComment String?
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reward      GroupReward @relation(fields: [rewardId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([userId, redeemedAt])
  @@index([status])
  @@map("reward_redemptions")
}

model PointTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String
  source      String?
  sourceId    String?
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId])
  @@index([userId, createdAt])
  @@index([type])
  @@map("point_transactions")
}

// ===== SYSTÈME QUIZ DE LECTURE =====

model ReadingQuiz {
  id          String   @id @default(cuid())
  bookId      String
  title       String
  description String
  triggerPage Int
  maxAttempts Int      @default(3)
  timeLimit   Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  book        Book     @relation(fields: [bookId], references: [id])
  questions   QuizQuestion[]
  attempts    QuizAttempt[]
  @@index([bookId, triggerPage])
  @@map("reading_quizzes")
}

model QuizQuestion {
  id            String   @id @default(cuid())
  quizId        String
  order         Int
  type          String
  category      String
  question      String
  options       Json
  correctAnswer String
  explanation   String?
  points        Int      @default(1)
  quiz          ReadingQuiz @relation(fields: [quizId], references: [id])
  @@index([quizId, order])
  @@map("quiz_questions")
}

model QuizAttempt {
  id           String   @id @default(cuid())
  quizId       String
  userId       String
  startedAt    DateTime @default(now())
  completedAt  DateTime?
  score        Int      @default(0)
  maxScore     Int      @default(7)
  isPassed     Boolean  @default(false)
  pointsEarned Int      @default(0)
  timeSpent    Int?
  quiz         ReadingQuiz @relation(fields: [quizId], references: [id])
  user         User     @relation(fields: [userId], references: [id])
  @@index([userId, quizId])
  @@map("quiz_attempts")
}
